@{
    ViewData["Title"] = "Gráfico Comparativo - Presupuesto vs Ejecución";
}

<!-- Referencias necesarias para Chart.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-chart-bar"></i> Gráfico Comparativo - Presupuesto vs Ejecución
                    </h4>
                </div>
                <div class="card-body">
                    <!-- FILTROS DE FECHA -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <h5>Seleccionar Período</h5>
                        </div>
                    </div>
                    
                    <form id="formFiltros" class="row g-3">
                        <div class="col-md-4">
                            <label for="fechaInicio" class="form-label">Fecha Inicio</label>
                            <input type="date" class="form-control" id="fechaInicio" name="fechaInicio" 
                                   value="@DateTime.Now.ToString("yyyy-MM-01")" required>
                        </div>
                        <div class="col-md-4">
                            <label for="fechaFin" class="form-label">Fecha Fin</label>
                            <input type="date" class="form-control" id="fechaFin" name="fechaFin" 
                                   value="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-primary w-100" onclick="generarGrafico()">
                                <i class="fas fa-chart-line"></i> Generar Gráfico
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- TARJETAS DE RESUMEN -->
    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">Total Presupuestado</h4>
                            <h2 id="totalPresupuestado">₡0.00</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-wallet fa-3x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">Total Ejecutado</h4>
                            <h2 id="totalEjecutado">₡0.00</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-receipt fa-3x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">% Ejecución General</h4>
                            <h2 id="porcentajeEjecucion">0.0%</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-percentage fa-3x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- GRÁFICO -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Gráfico Comparativo por Tipo de Gasto</h5>
                </div>
                <div class="card-body">
                    <!-- Mensaje de estado -->
                    <div id="mensaje-estado" class="alert alert-info" style="display: none;">
                        <i class="fas fa-info-circle"></i>
                        <span id="texto-estado">Cargando datos...</span>
                    </div>

                    <div id="grafico-container" style="position: relative; height: 400px;">
                        <canvas id="graficoComparativo"></canvas>
                    </div>
                    
                    <div id="mensaje-sin-datos" class="text-center text-muted" style="display: none;">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <p class="h5">No se encontraron datos para el período seleccionado</p>
                        <p class="text-muted">Verifique que existan presupuestos y gastos para las fechas indicadas</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let graficoChart = null;

    // Función para formatear moneda
    function formatearMoneda(valor) {
        return new Intl.NumberFormat('es-CR', {
            style: 'currency',
            currency: 'CRC',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(valor);
    }

    // Función para mostrar mensaje de estado
    function mostrarEstado(mensaje, tipo) {
        tipo = tipo || 'info';
        const mensajeDiv = document.getElementById('mensaje-estado');
        const textoSpan = document.getElementById('texto-estado');
        
        if (!mensajeDiv || !textoSpan) return;
        
        mensajeDiv.className = 'alert alert-' + tipo;
        textoSpan.textContent = mensaje;
        mensajeDiv.style.display = 'block';
        
        // Ocultar automáticamente después de 5 segundos si es éxito
        if (tipo === 'success') {
            setTimeout(function() {
                mensajeDiv.style.display = 'none';
            }, 5000);
        }
    }

    // Función para ocultar mensaje de estado
    function ocultarEstado() {
        const mensajeDiv = document.getElementById('mensaje-estado');
        if (mensajeDiv) {
            mensajeDiv.style.display = 'none';
        }
    }

    // Función para actualizar las tarjetas de totales
    function actualizarTotales(totalPresupuestado, totalEjecutado) {
        const elemPresupuestado = document.getElementById('totalPresupuestado');
        const elemEjecutado = document.getElementById('totalEjecutado');
        const elemPorcentaje = document.getElementById('porcentajeEjecucion');
        
        if (elemPresupuestado) elemPresupuestado.textContent = formatearMoneda(totalPresupuestado);
        if (elemEjecutado) elemEjecutado.textContent = formatearMoneda(totalEjecutado);
        
        const porcentaje = totalPresupuestado > 0 ? (totalEjecutado / totalPresupuestado * 100) : 0;
        if (elemPorcentaje) elemPorcentaje.textContent = porcentaje.toFixed(1) + '%';
        
        // Cambiar color según el porcentaje
        const cardPorcentaje = elemPorcentaje ? elemPorcentaje.closest('.card') : null;
        if (cardPorcentaje) {
            if (porcentaje <= 80) {
                cardPorcentaje.className = 'card text-white bg-success';
            } else if (porcentaje <= 100) {
                cardPorcentaje.className = 'card text-white bg-warning';
            } else {
                cardPorcentaje.className = 'card text-white bg-danger';
            }
        }
    }

    // Función para mostrar el gráfico
    function mostrarGrafico(datos) {
        const ctx = document.getElementById('graficoComparativo');
        if (!ctx) {
            console.error('Canvas no encontrado');
            return;
        }

        const context = ctx.getContext('2d');
        
        // Destruir gráfico anterior si existe
        if (graficoChart) {
            graficoChart.destroy();
        }

        const labels = datos.map(function(d) { return d.tipoGasto; });
        const presupuestado = datos.map(function(d) { return d.presupuestado; });
        const ejecutado = datos.map(function(d) { return d.ejecutado; });

        graficoChart = new Chart(context, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Presupuestado',
                        data: presupuestado,
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        borderRadius: 5,
                        borderSkipped: false
                    },
                    {
                        label: 'Ejecutado',
                        data: ejecutado,
                        backgroundColor: 'rgba(255, 206, 86, 0.8)',
                        borderColor: 'rgba(255, 206, 86, 1)',
                        borderWidth: 2,
                        borderRadius: 5,
                        borderSkipped: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Comparación Presupuesto vs Ejecución por Tipo de Gasto',
                        font: {
                            size: 16,
                            weight: 'bold'
                        },
                        padding: 20
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                const label = context.dataset.label || '';
                                const value = formatearMoneda(context.parsed.y);
                                return label + ': ' + value;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatearMoneda(value);
                            },
                            font: {
                                size: 11
                            }
                        },
                        title: {
                            display: true,
                            text: 'Monto (₡)'
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 0,
                            font: {
                                size: 11,
                                weight: '600'
                            }
                        },
                        title: {
                            display: true,
                            text: 'Tipo de Gasto'
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            }
        });

        // Mostrar el contenedor del gráfico y ocultar mensaje sin datos
        const graficoContainer = document.getElementById('grafico-container');
        const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
        
        if (graficoContainer) graficoContainer.style.display = 'block';
        if (mensajeSinDatos) mensajeSinDatos.style.display = 'none';
        
        ocultarEstado();
    }

    // Función para generar el gráfico
    function generarGrafico() {
        const fechaInicio = document.getElementById('fechaInicio').value;
        const fechaFin = document.getElementById('fechaFin').value;
        
        // Validaciones
        if (!fechaInicio || !fechaFin) {
            mostrarEstado('Por favor seleccione ambas fechas', 'warning');
            return;
        }

        if (new Date(fechaInicio) > new Date(fechaFin)) {
            mostrarEstado('La fecha de inicio no puede ser mayor que la fecha fin', 'danger');
            return;
        }

        // Mostrar loading
        mostrarEstado('Cargando datos del gráfico...', 'info');
        
        const graficoContainer = document.getElementById('grafico-container');
        const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
        
        if (graficoContainer) graficoContainer.style.display = 'none';
        if (mensajeSinDatos) mensajeSinDatos.style.display = 'none';

        // Construir URL con parámetros
        const url = '/Presupuesto/ObtenerDatosGrafico?fechaInicio=' + encodeURIComponent(fechaInicio) + '&fechaFin=' + encodeURIComponent(fechaFin);

        // Obtener datos del servidor usando XMLHttpRequest para compatibilidad
        const xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        // Verificar si existe el token CSRF
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]');
        if (csrfToken) {
            xhr.setRequestHeader('RequestVerificationToken', csrfToken.value);
        }

        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        const data = JSON.parse(xhr.responseText);
                        console.log('Datos recibidos:', data); // Para debug

                        if (data.success) {
                            if (data.datos && data.datos.length > 0) {
                                mostrarGrafico(data.datos);
                                actualizarTotales(data.totalPresupuestado || 0, data.totalEjecutado || 0);
                                mostrarEstado('Gráfico generado exitosamente', 'success');
                            } else {
                                // No hay datos
                                const graficoContainer = document.getElementById('grafico-container');
                                const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
                                
                                if (graficoContainer) graficoContainer.style.display = 'none';
                                if (mensajeSinDatos) mensajeSinDatos.style.display = 'block';
                                
                                actualizarTotales(0, 0);
                                mostrarEstado(data.mensaje || 'No se encontraron datos para el período seleccionado', 'warning');
                            }
                        } else {
                            throw new Error(data.message || 'Error desconocido al obtener datos');
                        }
                    } catch (error) {
                        console.error('Error al procesar respuesta:', error);
                        
                        const graficoContainer = document.getElementById('grafico-container');
                        const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
                        
                        if (graficoContainer) graficoContainer.style.display = 'none';
                        if (mensajeSinDatos) mensajeSinDatos.style.display = 'block';
                        
                        actualizarTotales(0, 0);
                        mostrarEstado('Error al procesar los datos: ' + error.message, 'danger');
                    }
                } else {
                    console.error('Error del servidor:', xhr.status);
                    
                    const graficoContainer = document.getElementById('grafico-container');
                    const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
                    
                    if (graficoContainer) graficoContainer.style.display = 'none';
                    if (mensajeSinDatos) mensajeSinDatos.style.display = 'block';
                    
                    actualizarTotales(0, 0);
                    mostrarEstado('Error del servidor: ' + xhr.status, 'danger');
                }
            }
        };

        xhr.onerror = function() {
            console.error('Error de conexión');
            
            const graficoContainer = document.getElementById('grafico-container');
            const mensajeSinDatos = document.getElementById('mensaje-sin-datos');
            
            if (graficoContainer) graficoContainer.style.display = 'none';
            if (mensajeSinDatos) mensajeSinDatos.style.display = 'block';
            
            actualizarTotales(0, 0);
            mostrarEstado('Error de conexión con el servidor', 'danger');
        };

        xhr.send();
    }

    // Validación de fechas en tiempo real
    document.addEventListener('DOMContentLoaded', function() {
        const fechaInicio = document.getElementById('fechaInicio');
        const fechaFin = document.getElementById('fechaFin');
        
        if (fechaInicio) {
            fechaInicio.addEventListener('change', function() {
                const fechaFinValue = fechaFin ? fechaFin.value : '';
                if (fechaFinValue && new Date(this.value) > new Date(fechaFinValue)) {
                    mostrarEstado('La fecha de inicio no puede ser mayor que la fecha fin', 'warning');
                }
            });
        }
        
        if (fechaFin) {
            fechaFin.addEventListener('change', function() {
                const fechaInicioValue = fechaInicio ? fechaInicio.value : '';
                if (fechaInicioValue && new Date(fechaInicioValue) > new Date(this.value)) {
                    mostrarEstado('La fecha fin no puede ser menor que la fecha de inicio', 'warning');
                }
            });
        }

        // Cargar datos automáticamente al cargar la página
        generarGrafico();
    });
</script>
}

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: none;
    }

    .card-header {
        border-radius: 0.375rem 0.375rem 0 0 !important;
    }

    .btn {
        border-radius: 0.375rem;
    }

    .form-control {
        border-radius: 0.375rem;
    }

    #graficoComparativo {
        max-height: 400px;
    }

    .bg-info {
        background-color: #17a2b8 !important;
    }

    .bg-warning {
        background-color: #ffc107 !important;
    }

    .bg-success {
        background-color: #28a745 !important;
    }

    .bg-danger {
        background-color: #dc3545 !important;
    }
</style>
